generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid      String   @id @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  groups UserGroup[]
  roles  UserRole[]

  @@map("user")
}

model Group {
  name        String   @id
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  users     UserGroup[]
  roles     Role[]
  userRoles UserRole[]

  @@map("group")
}

model UserGroup {
  userUuid  String   @map("user_uuid") @db.Uuid
  User      User     @relation(fields: [userUuid], references: [uuid])
  groupName String   @map("group_name")
  Group     Group    @relation(fields: [groupName], references: [name])
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userUuid, groupName])
  @@map("user_group")
}

model Role {
  id                 Int
  name               String
  groupName          String     @map("group_name")
  Group              Group      @relation(fields: [groupName], references: [name])
  authoities         Authoity[] @map("authoities")
  externalAuthoities String[]   @map("external_authoities")

  userRoles UserRole[]

  @@id([id, groupName])
  @@unique([name, groupName])
}

enum Authoity {
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
  GROUP_UPDATE
  GROUP_DELETE
}

model UserRole {
  userUuid  String @map("user_uuid") @db.Uuid
  User      User   @relation(fields: [userUuid], references: [uuid])
  groupName String @map("group_name")
  Group     Group  @relation(fields: [groupName], references: [name])
  roleId    Int    @map("role_id")
  Role      Role   @relation(fields: [roleId, groupName], references: [id, groupName])

  @@id([userUuid, groupName])
  @@map("user_role")
}
