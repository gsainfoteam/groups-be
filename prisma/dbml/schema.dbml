//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Project "groups" {
  database_type: 'PostgreSQL'
  Note: ''
}

Table client {
  uuid String [pk]
  name String [unique, not null]
  password String [not null]
  grant Grant [not null, default: 'REJECT']
  redirectUri String[] [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  ExternalPermission client_permission [not null]
}

Table client_permission {
  clientUuid String [not null]
  Client client [not null]
  permission String [not null]
  RoleExternalPermission role_permission [not null]

  indexes {
    (clientUuid, permission) [pk]
  }
}

Table role_permission {
  roleId Int [not null]
  roleGroupUuid String [not null]
  Role role [not null]
  clientUuid String [not null]
  permission String [not null]
  ExternalPermission client_permission [not null]

  indexes {
    (roleId, roleGroupUuid, clientUuid, permission) [pk]
  }
}

Table user {
  uuid String [pk]
  name String [not null]
  email String [unique, not null]
  createdAt DateTime [default: `now()`, not null]
  UserGroup user_group [not null]
  UserRole user_role [not null]
  OwnedGroup group [not null]
}

Table group {
  uuid String [pk]
  name String [not null]
  description String
  createdAt DateTime [default: `now()`, not null]
  verifiedAt DateTime
  presidentUuid String [not null]
  deletedAt DateTime
  notionPageId String
  profileImageKey String
  President user [not null]
  UserGroup user_group [not null]
  Role role [not null]
  UserRole user_role [not null]
}

Table user_group {
  userUuid String [not null]
  User user [not null]
  groupUuid String [not null]
  Group group [not null]
  createdAt DateTime [default: `now()`, not null]
  visibility Visibility [not null, default: 'Private']

  indexes {
    (userUuid, groupUuid) [pk]
  }
}

Table role {
  id Int [not null]
  name String [not null]
  groupUuid String [not null]
  Group group [not null]
  permissions Permission[] [not null]
  userRole user_role [not null]
  RoleExternalPermission role_permission [not null]

  indexes {
    (id, groupUuid) [pk]
    (name, groupUuid) [unique]
  }
}

Table user_role {
  userUuid String [not null]
  User user [not null]
  groupUuid String [not null]
  Group group [not null]
  roleId Int [not null]
  Role role [not null]

  indexes {
    (userUuid, groupUuid, roleId) [pk]
  }
}

Enum Grant {
  APPROVE
  REJECT
}

Enum Permission {
  MEMBER_UPDATE
  MEMBER_DELETE
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
  ROLE_GRANT
  ROLE_REVOKE
  GROUP_UPDATE
  GROUP_DELETE
}

Enum Visibility {
  Public
  Private
}

Ref: client_permission.clientUuid > client.uuid

Ref: role_permission.(roleId, roleGroupUuid) > role.(id, groupUuid)

Ref: role_permission.(clientUuid, permission) > client_permission.(clientUuid, permission)

Ref: group.presidentUuid > user.uuid

Ref: user_group.userUuid > user.uuid

Ref: user_group.groupUuid > group.uuid [delete: Cascade]

Ref: role.groupUuid > group.uuid [delete: Cascade]

Ref: user_role.userUuid > user.uuid

Ref: user_role.groupUuid > group.uuid [delete: Cascade]

Ref: user_role.(roleId, groupUuid) > role.(id, groupUuid) [delete: Cascade]