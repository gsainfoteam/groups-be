generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "groups"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Grant {
  APPROVE
  REJECT
}

enum Authority {
  MEMBER_UPDATE
  MEMBER_DELETE
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
  GROUP_UPDATE
  GROUP_DELETE
}

model Client {
  uuid     String @id @default(uuid()) @db.Uuid
  name     String @unique
  password String
  grant    Grant  @default(REJECT)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("client")
}

model User {
  uuid      String   @id @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  UserGroup  UserGroup[]
  UserRole   UserRole[]
  OwnedGroup Group[]

  @@map("user")
}

model Group {
  uuid          String   @id @default(uuid()) @db.Uuid
  name          String   @unique
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")
  presidentUuid String   @map("president_uuid") @db.Uuid

  President User @relation(fields: [presidentUuid], references: [uuid])

  UserGroup UserGroup[]
  Role      Role[]
  UserRole  UserRole[]

  @@map("group")
}

model UserGroup {
  userUuid  String   @map("user_uuid") @db.Uuid
  User      User     @relation(fields: [userUuid], references: [uuid])
  groupUuid String   @map("group_uuid") @db.Uuid
  Group     Group    @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userUuid, groupUuid])
  @@map("user_group")
}

model Role {
  id                  Int
  name                String
  groupUuid           String      @map("group_uuid") @db.Uuid
  Group               Group       @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)
  authorities         Authority[] @map("authorities")
  externalAuthorities String[]    @map("external_authorities")

  userRole UserRole[]

  @@id([id, groupUuid])
  @@unique([name, groupUuid])
  @@map("role")
}

model UserRole {
  userUuid  String @map("user_uuid") @db.Uuid
  User      User   @relation(fields: [userUuid], references: [uuid])
  groupUuid String @map("group_uuid") @db.Uuid
  Group     Group  @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)
  roleId    Int    @map("role_id")
  Role      Role   @relation(fields: [roleId, groupUuid], references: [id, groupUuid], onDelete: Cascade)

  @@id([userUuid, groupUuid])
  @@map("user_role")
}
