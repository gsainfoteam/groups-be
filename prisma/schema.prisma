generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "groups"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Grant {
  APPROVE
  REJECT
}

enum Permission {
  MEMBER_UPDATE
  MEMBER_DELETE
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
  ROLE_GRANT
  ROLE_REVOKE
  GROUP_UPDATE
  GROUP_DELETE
}

enum Visibility {
  Public
  Private
}

model Client {
  uuid     String @id @default(uuid()) @db.Uuid
  name     String @unique
  password String
  grant    Grant  @default(REJECT)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ExternalPermission ExternalPermission[]

  @@map("client")
}

model ExternalPermission {
  clientUuid String @map("client_uuid") @db.Uuid
  Client     Client @relation(fields: [clientUuid], references: [uuid])
  permission String

  RoleExternalPermission RoleExternalPermission[]

  @@id([clientUuid, permission])
  @@map("client_authority")
}

model RoleExternalPermission {
  roleId        Int    @map("role_id")
  roleGroupUuid String @map("role_group_uuid") @db.Uuid
  Role          Role   @relation(fields: [roleId, roleGroupUuid], references: [id, groupUuid])
  clientUuid    String @map("client_uuid") @db.Uuid
  permission    String

  ExternalPermission ExternalPermission @relation(fields: [clientUuid, permission], references: [clientUuid, permission])

  @@id([roleId, roleGroupUuid, clientUuid, permission])
  @@map("role_authority")
}

model User {
  uuid      String   @id @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  UserRole   UserRole[]
  OwnedGroup Group[]

  @@map("user")
}

model Group {
  uuid            String    @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  createdAt       DateTime  @default(now()) @map("created_at")
  verifiedAt      DateTime? @map("verified_at")
  presidentUuid   String    @map("president_uuid") @db.Uuid
  deletedAt       DateTime? @map("deleted_at")
  notionPageId    String?
  profileImageKey String?   @map("profile_image_key")

  President User @relation(fields: [presidentUuid], references: [uuid])

  Role     Role[]
  UserRole UserRole[]

  @@map("group")
}

model Role {
  id          Int
  name        String
  groupUuid   String       @map("group_uuid") @db.Uuid
  Group       Group        @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)
  authorities Permission[] @map("permissions")

  userRole               UserRole[]
  RoleExternalPermission RoleExternalPermission[]

  @@id([id, groupUuid])
  @@unique([name, groupUuid])
  @@map("role")
}

model UserRole {
  userUuid  String @map("user_uuid") @db.Uuid
  User      User   @relation(fields: [userUuid], references: [uuid])
  groupUuid String @map("group_uuid") @db.Uuid
  Group     Group  @relation(fields: [groupUuid], references: [uuid], onDelete: Cascade)
  roleId    Int    @map("role_id")
  Role      Role   @relation(fields: [roleId, groupUuid], references: [id, groupUuid], onDelete: Cascade)

  @@id([userUuid, groupUuid, roleId])
  @@map("user_role")
}
